"""
Set intersect , Keller(Example programs used in the SPDZ tutorial at the TPMPC 2017 workshop in Bristol.)
Adapted by Jacob Obrman
"""

from util import if_else

program.bit_length = 32

def compute_intersection(a, b):
	""" Naive quadratic private set intersection.

	Returns: secret Array with intersection (padded to len(a)), and
	secret Array of bits indicating whether Alice's input matches or not """
	n = len(a)
	if n != len(b):
		raise CompilerError('Inconsistent lengths to compute_intersection')
	intersection = Array(n, sint)
	is_match_at = Array(n, sint)

	@for_range(n)
	def _(i):
		@for_range(n)
		def _(j):
			match = a[i] == b[j]
			is_match_at[i] += match
			intersection[i] = if_else(match, a[i], intersection[i]) # match * a[i] + (1 - match) * intersection[i]
	return intersection, is_match_at
	
def set_intersection(n):
	"""Naive private set intersection on two Arrays, followed by computing the size and average of the intersection"""
	a = Array(n, sint)
	b = Array(n, sint)
	print_ln('Running PSI example')
	@for_range(n)
	def _(i):
		a[i] = i
		b[i] = i + 6
	intersection, is_match_at = compute_intersection(a,b)

	print_ln('Printing set intersection (0: not in intersection)')
	size = MemValue(sint(0))
	total = MemValue(sint(0))
	@for_range(n)
	def _(i):
		size.write(size + is_match_at[i])
		total.write(total + intersection[i])
		print_str('%s ', intersection[i].reveal())
	print_ln('\nIntersection size: %s', size.reveal())

	total_fixed = sfix()
	total_fixed.load_int(total.read())
	print_ln('Average in intersection: %s', (total_fixed / size.read()).reveal())




try:
	set_intersection(program.args[1])
except:
	print_ln('Please provide the size of the set with')
	print_ln('./compile.py experiment setsize\n')


print_ln('testing random num gen\n')
n = 2
try:
        n = int(program.args[1])
except:
        print_ln('Please provide the size of the set with')
        print_ln('./compile.py experiment setsize\n')
@for_range(n)
def _(i):
        print_ln('rand num %s: %s', i, regint.get_random(4))
